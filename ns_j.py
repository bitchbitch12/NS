# -*- coding: utf-8 -*-
"""Copy of NS_PS2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lg5rz1xCFttdsIoQcuvXAmOpaD4l1cEk

**Generalized**
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
from random import randint

def real_network(title):
  facebook = pd.read_csv(
    "/content/facebook_combined.txt",

    sep=" ",
    names=["start_node", "end_node"],
)
  G = nx.from_pandas_edgelist(facebook, "start_node", "end_node")
  E=G.number_of_edges()
  V=G.number_of_nodes()
  shortest_path_lengths = dict(nx.all_pairs_shortest_path_length(G))
  average_path_lengths = [
    np.mean(list(spl.values())) for spl in shortest_path_lengths.values()
  ]

  avg_path=np.mean(average_path_lengths)
  avg_deg=2*E/V
  c_coeff=approximation.average_clustering(G, trials=1000, seed=10)
  return E,V,[title,V,avg_deg,avg_path,c_coeff]

def random_network(V):
  p=np.round(avg_deg/V,2)
  G2= nx.erdos_renyi_graph(V,p)
  avg_d=np.mean([d for _, d in G2.degree()])
  shortest_path_lengths2 = dict(nx.all_pairs_shortest_path_length(G2))
  average_path_lengths2 = [
    np.mean(list(spl.values())) for spl in shortest_path_lengths2.values()
  ]
  avg_path2=np.mean(average_path_lengths2)
  c_coeff=approximation.average_clustering(G, trials=1000, seed=10)
  return [avg_d,avg_path2,c_coeff]

res=real_network('facebook')[2]

def construct_table():
  ans=[]
  res=real_network('facebook')[2]
  res1=random_network(res[1])
  print(res1)
  temp=res+res1
  ans.append(temp)
  df = pd.DataFrame(ans,columns =['Title','Size','<k>','l','c','<k>_rand','l_rand','c_rand'])
  return df

df=construct_table()

df

"""**Single Graph**"""

facebook = pd.read_csv(
    "/content/facebook_combined.txt",

    sep=" ",
    names=["start_node", "end_node"],
)

G = nx.from_pandas_edgelist(facebook, "start_node", "end_node")

fig, ax = plt.subplots(figsize=(15, 9))
ax.axis("off")
plot_options = {"node_size": 10, "with_labels": False, "width": 0.15}
nx.draw_networkx(G, pos=nx.random_layout(G), ax=ax, **plot_options)

pos = nx.spring_layout(G, iterations=15, seed=1721)
fig, ax = plt.subplots(figsize=(15, 9))
ax.axis("off")
nx.draw_networkx(G, pos=pos, ax=ax, **plot_options)

E=G.number_of_edges()

V=G.number_of_nodes()

"""**Average Path Length**"""

shortest_path_lengths = dict(nx.all_pairs_shortest_path_length(G))

average_path_lengths = [
    np.mean(list(spl.values())) for spl in shortest_path_lengths.values()
]

np.mean(average_path_lengths)

"""**Average Degree**"""

avg_deg=2*E/V

avg_deg

"""**Average Clustering Coefficient**"""

from networkx.algorithms import approximation

approximation.average_clustering(G, trials=1000, seed=10)

"""**ER GRAPH**"""

p=np.round(avg_deg/V,2)

p

G2= nx.erdos_renyi_graph(V,p)

pos = nx.spring_layout(G2, iterations=15, seed=1721)
fig, ax = plt.subplots(figsize=(15, 9))
ax.axis("off")
nx.draw_networkx(G2, pos=pos, ax=ax, **plot_options)

shortest_path_lengths2 = dict(nx.all_pairs_shortest_path_length(G2))

average_path_lengths2 = [
    np.mean(list(spl.values())) for spl in shortest_path_lengths2.values()
]

np.mean(average_path_lengths2)

approximation.average_clustering(G2, trials=1000, seed=10)